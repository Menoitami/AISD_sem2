# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'kurs.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from collections import defaultdict


from PyQt5 import QtCore, QtGui, QtWidgets
import time
import numpy as np
import copy
from typing import List


class GraphSudokuSolver:
    def __init__(self, num_vertices):
        self.adj = defaultdict(list)
        self.num_vertices = num_vertices
        self.result = [-1] * num_vertices

    def addEdge(self, v, w):
        self.adj[v].append(w)
        self.adj[w].append(v)

    def sudokuGrid2Graph(self, grid):
        for vertNum in range(self.num_vertices):
            vLine = vertNum // 9
            vCol = vertNum % 9

            for cur in range(9):
                if vertNum + cur - vCol != vertNum:
                    self.addEdge(vertNum, vertNum + cur - vCol)
                if vertNum != cur * 9 + vCol:
                    self.addEdge(vertNum, cur * 9 + vCol)

            for i in range((vLine // 3) * 3, ((vLine // 3) + 1) * 3):
                for j in range((vCol // 3) * 3, ((vCol // 3) + 1) * 3):
                    nE = i * 9 + j
                    if nE != vertNum:
                        self.addEdge(vertNum, nE)

            self.result[vertNum] = grid[vLine][vCol] - 1

    def getGridFromColors(self):
        grid = [[0] * 9 for _ in range(9)]
        for vertNum in range(self.num_vertices):
            vLine = vertNum // 9
            vCol = vertNum % 9
            grid[vLine][vCol] = self.result[vertNum] + 1
        return grid

    def greedyColoring(self):
        IsLinkedCr = [False] * self.num_vertices

        for u in range(self.num_vertices):
            if self.result[u] != -1:
                continue

            for v in self.adj[u]:
                if self.result[v] != -1:
                    IsLinkedCr[self.result[v]] = True

            cr = 1
            while IsLinkedCr[cr]:
                cr += 1

            if cr>8:
                self.result[u] = -1
            else:
                self.result[u] = cr

            for v in self.adj[u]:
                if self.result[v] != -1:
                    IsLinkedCr[self.result[v]] = False

    def solveSudoku(self, grid):
        self.sudokuGrid2Graph(grid)
        self.greedyColoring()
        grid=self.getGridFromColors()
        for row in grid:
                print(row)
        return grid





class Ui_Form(object):
    
    

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(994, 744)
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(10, 300, 561, 21))
        self.line.setMidLineWidth(4)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setGeometry(QtCore.QRect(10, 480, 561, 21))
        self.line_2.setMidLineWidth(4)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(Form)
        self.line_3.setGeometry(QtCore.QRect(186, 130, 10, 541))
        self.line_3.setMidLineWidth(6)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(Form)
        self.line_4.setGeometry(QtCore.QRect(367, 130, 10, 541))
        self.line_4.setMidLineWidth(6)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(640, 190, 71, 71))
        self.pushButton.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(740, 190, 71, 71))
        self.pushButton_2.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(840, 190, 71, 71))
        self.pushButton_3.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(640, 290, 71, 71))
        self.pushButton_4.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(740, 290, 71, 71))
        self.pushButton_5.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(840, 290, 71, 71))
        self.pushButton_6.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        self.pushButton_7.setGeometry(QtCore.QRect(640, 390, 71, 71))
        self.pushButton_7.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(Form)
        self.pushButton_8.setGeometry(QtCore.QRect(740, 390, 71, 71))
        self.pushButton_8.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(Form)
        self.pushButton_9.setGeometry(QtCore.QRect(840, 390, 71, 71))
        self.pushButton_9.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"font: 28pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(0, 0, 0);\n"
"")
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_text = QtWidgets.QLabel(Form)
        self.label_text.setGeometry(QtCore.QRect(630, 510, 291, 101))
        self.label_text.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_text.setText("")
        self.label_text.setObjectName("label_text")
        self.pushButton_10 = QtWidgets.QPushButton(Form)
        self.pushButton_10.setGeometry(QtCore.QRect(630, 640, 145, 61))
        self.pushButton_10.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.pushButton_10.setObjectName("pushButton_10")

        self.pushButton_resh = QtWidgets.QPushButton(Form)
        self.pushButton_resh.setGeometry(QtCore.QRect(780, 640, 145, 61))
        self.pushButton_resh.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.pushButton_resh.setObjectName("pushButton_resh")

        self.pushButton_reset = QtWidgets.QPushButton(Form)
        self.pushButton_reset.setGeometry(QtCore.QRect(780, 40, 145, 61))
        self.pushButton_reset.setStyleSheet("background-color: rgb(213, 213, 213);\n"
"\n"
"font: 14pt \"MS Shell Dlg 2\";")
        self.pushButton_reset.setObjectName("pushButton_reset")

        self.listok = [] 
        for i in range(9): 
                self.listok.append([0] * 9)

        for i in range(9):
            for j in range(9):
                self.listok[j][i]= QtWidgets.QPushButton(Form)
                self.listok[j][i].setGeometry(QtCore.QRect((10+i*60), (130+j*60), 61, 61))
                self.listok[j][i].setStyleSheet("border-color: rgb(152, 152, 152);\n"
"font: 24pt \"MS Shell Dlg 2\";\n"
"border-color: rgb(170, 0, 0);")
                self.listok[j][i].setObjectName(str(j)+str(i))





        
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 1001, 751))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../../Downloads/0527ea7263f2e771f3eac94f7c5e8222.jpeg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label.raise_()
        
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.pushButton_7.raise_()
        self.pushButton_8.raise_()
        self.pushButton_9.raise_()
        self.label_text.raise_()
        self.pushButton_10.raise_()
        self.pushButton_resh.raise_()
        self.pushButton_reset.raise_()
        for i in range(9):
            for j in range(9):
                self.listok[j][i].raise_()
        self.line_3.raise_()
        self.line_4.raise_()
        self.line_2.raise_()
        self.line.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.add_functions()



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Sudoku"))
        self.pushButton.setText(_translate("Form", "1"))
        self.pushButton_2.setText(_translate("Form", "2"))
        self.pushButton_3.setText(_translate("Form", "3"))
        self.pushButton_4.setText(_translate("Form", "4"))
        self.pushButton_5.setText(_translate("Form", "5"))
        self.pushButton_6.setText(_translate("Form", "6"))
        self.pushButton_7.setText(_translate("Form", "7"))
        self.pushButton_8.setText(_translate("Form", "8"))
        self.pushButton_9.setText(_translate("Form", "9"))
        self.pushButton_10.setText(_translate("Form", "через цвет"))
        self.pushButton_resh.setText(_translate("Form", "обычный"))
        self.pushButton_reset.setText(_translate("Form", "reset"))

        

    def add_functions(self):
        self.pushButton.clicked.connect(lambda: self.changeClickedButton(self.pushButton.text()))
        self.pushButton_2.clicked.connect(lambda: self.changeClickedButton(self.pushButton_2.text()))
        self.pushButton_3.clicked.connect(lambda: self.changeClickedButton(self.pushButton_3.text()))
        self.pushButton_4.clicked.connect(lambda: self.changeClickedButton(self.pushButton_4.text()))
        self.pushButton_5.clicked.connect(lambda: self.changeClickedButton(self.pushButton_5.text()))
        self.pushButton_6.clicked.connect(lambda: self.changeClickedButton(self.pushButton_6.text()))
        self.pushButton_7.clicked.connect(lambda: self.changeClickedButton(self.pushButton_7.text()))
        self.pushButton_8.clicked.connect(lambda: self.changeClickedButton(self.pushButton_8.text()))
        self.pushButton_9.clicked.connect(lambda: self.changeClickedButton(self.pushButton_9.text()))
        
        self.listok[0][0].clicked.connect(lambda: self.fillUnit(self.listok[0][0]))
        self.listok[0][1].clicked.connect(lambda: self.fillUnit(self.listok[0][1]))
        self.listok[0][2].clicked.connect(lambda: self.fillUnit(self.listok[0][2]))
        self.listok[0][3].clicked.connect(lambda: self.fillUnit(self.listok[0][3]))
        self.listok[0][4].clicked.connect(lambda: self.fillUnit(self.listok[0][4]))
        self.listok[0][5].clicked.connect(lambda: self.fillUnit(self.listok[0][5]))
        self.listok[0][6].clicked.connect(lambda: self.fillUnit(self.listok[0][6]))
        self.listok[0][7].clicked.connect(lambda: self.fillUnit(self.listok[0][7]))
        self.listok[0][8].clicked.connect(lambda: self.fillUnit(self.listok[0][8]))
        self.listok[1][0].clicked.connect(lambda: self.fillUnit(self.listok[1][0]))
        self.listok[1][1].clicked.connect(lambda: self.fillUnit(self.listok[1][1]))
        self.listok[1][2].clicked.connect(lambda: self.fillUnit(self.listok[1][2]))
        self.listok[1][3].clicked.connect(lambda: self.fillUnit(self.listok[1][3]))
        self.listok[1][4].clicked.connect(lambda: self.fillUnit(self.listok[1][4]))
        self.listok[1][5].clicked.connect(lambda: self.fillUnit(self.listok[1][5]))
        self.listok[1][6].clicked.connect(lambda: self.fillUnit(self.listok[1][6]))
        self.listok[1][7].clicked.connect(lambda: self.fillUnit(self.listok[1][7]))
        self.listok[1][8].clicked.connect(lambda: self.fillUnit(self.listok[1][8]))
        self.listok[2][0].clicked.connect(lambda: self.fillUnit(self.listok[2][0]))
        self.listok[2][1].clicked.connect(lambda: self.fillUnit(self.listok[2][1]))
        self.listok[2][2].clicked.connect(lambda: self.fillUnit(self.listok[2][2]))
        self.listok[2][3].clicked.connect(lambda: self.fillUnit(self.listok[2][3]))
        self.listok[2][4].clicked.connect(lambda: self.fillUnit(self.listok[2][4]))
        self.listok[2][5].clicked.connect(lambda: self.fillUnit(self.listok[2][5]))
        self.listok[2][6].clicked.connect(lambda: self.fillUnit(self.listok[2][6]))
        self.listok[2][7].clicked.connect(lambda: self.fillUnit(self.listok[2][7]))
        self.listok[2][8].clicked.connect(lambda: self.fillUnit(self.listok[2][8]))
        self.listok[3][0].clicked.connect(lambda: self.fillUnit(self.listok[3][0]))
        self.listok[3][1].clicked.connect(lambda: self.fillUnit(self.listok[3][1]))
        self.listok[3][2].clicked.connect(lambda: self.fillUnit(self.listok[3][2]))
        self.listok[3][3].clicked.connect(lambda: self.fillUnit(self.listok[3][3]))
        self.listok[3][4].clicked.connect(lambda: self.fillUnit(self.listok[3][4]))
        self.listok[3][5].clicked.connect(lambda: self.fillUnit(self.listok[3][5]))
        self.listok[3][6].clicked.connect(lambda: self.fillUnit(self.listok[3][6]))
        self.listok[3][7].clicked.connect(lambda: self.fillUnit(self.listok[3][7]))
        self.listok[3][8].clicked.connect(lambda: self.fillUnit(self.listok[3][8]))
        self.listok[4][0].clicked.connect(lambda: self.fillUnit(self.listok[4][0]))
        self.listok[4][1].clicked.connect(lambda: self.fillUnit(self.listok[4][1]))
        self.listok[4][2].clicked.connect(lambda: self.fillUnit(self.listok[4][2]))
        self.listok[4][3].clicked.connect(lambda: self.fillUnit(self.listok[4][3]))
        self.listok[4][4].clicked.connect(lambda: self.fillUnit(self.listok[4][4]))
        self.listok[4][5].clicked.connect(lambda: self.fillUnit(self.listok[4][5]))
        self.listok[4][6].clicked.connect(lambda: self.fillUnit(self.listok[4][6]))
        self.listok[4][7].clicked.connect(lambda: self.fillUnit(self.listok[4][7]))
        self.listok[4][8].clicked.connect(lambda: self.fillUnit(self.listok[4][8]))
        self.listok[5][0].clicked.connect(lambda: self.fillUnit(self.listok[5][0]))
        self.listok[5][1].clicked.connect(lambda: self.fillUnit(self.listok[5][1]))
        self.listok[5][2].clicked.connect(lambda: self.fillUnit(self.listok[5][2]))
        self.listok[5][3].clicked.connect(lambda: self.fillUnit(self.listok[5][3]))
        self.listok[5][4].clicked.connect(lambda: self.fillUnit(self.listok[5][4]))
        self.listok[5][5].clicked.connect(lambda: self.fillUnit(self.listok[5][5]))
        self.listok[5][6].clicked.connect(lambda: self.fillUnit(self.listok[5][6]))
        self.listok[5][7].clicked.connect(lambda: self.fillUnit(self.listok[5][7]))
        self.listok[5][8].clicked.connect(lambda: self.fillUnit(self.listok[5][8]))
        self.listok[6][0].clicked.connect(lambda: self.fillUnit(self.listok[6][0]))
        self.listok[6][1].clicked.connect(lambda: self.fillUnit(self.listok[6][1]))
        self.listok[6][2].clicked.connect(lambda: self.fillUnit(self.listok[6][2]))
        self.listok[6][3].clicked.connect(lambda: self.fillUnit(self.listok[6][3]))
        self.listok[6][4].clicked.connect(lambda: self.fillUnit(self.listok[6][4]))
        self.listok[6][5].clicked.connect(lambda: self.fillUnit(self.listok[6][5]))
        self.listok[6][6].clicked.connect(lambda: self.fillUnit(self.listok[6][6]))
        self.listok[6][7].clicked.connect(lambda: self.fillUnit(self.listok[6][7]))
        self.listok[6][8].clicked.connect(lambda: self.fillUnit(self.listok[6][8]))
        self.listok[7][0].clicked.connect(lambda: self.fillUnit(self.listok[7][0]))
        self.listok[7][1].clicked.connect(lambda: self.fillUnit(self.listok[7][1]))
        self.listok[7][2].clicked.connect(lambda: self.fillUnit(self.listok[7][2]))
        self.listok[7][3].clicked.connect(lambda: self.fillUnit(self.listok[7][3]))
        self.listok[7][4].clicked.connect(lambda: self.fillUnit(self.listok[7][4]))
        self.listok[7][5].clicked.connect(lambda: self.fillUnit(self.listok[7][5]))
        self.listok[7][6].clicked.connect(lambda: self.fillUnit(self.listok[7][6]))
        self.listok[7][7].clicked.connect(lambda: self.fillUnit(self.listok[7][7]))
        self.listok[7][8].clicked.connect(lambda: self.fillUnit(self.listok[7][8]))
        self.listok[8][0].clicked.connect(lambda: self.fillUnit(self.listok[8][0]))
        self.listok[8][1].clicked.connect(lambda: self.fillUnit(self.listok[8][1]))
        self.listok[8][2].clicked.connect(lambda: self.fillUnit(self.listok[8][2]))
        self.listok[8][3].clicked.connect(lambda: self.fillUnit(self.listok[8][3]))
        self.listok[8][4].clicked.connect(lambda: self.fillUnit(self.listok[8][4]))
        self.listok[8][5].clicked.connect(lambda: self.fillUnit(self.listok[8][5]))
        self.listok[8][6].clicked.connect(lambda: self.fillUnit(self.listok[8][6]))
        self.listok[8][7].clicked.connect(lambda: self.fillUnit(self.listok[8][7]))
        self.listok[8][8].clicked.connect(lambda: self.fillUnit(self.listok[8][8]))
        self.pushButton_10.clicked.connect(lambda: (self.ColorSolver(self.grids)))
        self.pushButton_resh.clicked.connect(lambda: (self.run()))
        self.pushButton_reset.clicked.connect(lambda: (self.resetBoard(self.grids)))
        
    def fillTab(self):
                adjacency_table = [[[] for j in range(9)] for i in range(9)]

                for i in range(9):
                        for j in range(9):
                                for k in range(9):
                                        if k != j:
                                                adjacency_table[i][j].append((i, k))
                                        if k != i:
                                                adjacency_table[i][j].append((k, j))
                                for x in range(i//3*3, i//3*3+3):
                                        for y in range(j//3*3, j//3*3+3):
                                                if x != i or y != j:
                                                        adjacency_table[i][j].append((x, y))
                print(adjacency_table)
                return
        
    solver=GraphSudokuSolver(81)
   
    clicked_button="1"
    grids = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]
    

    def resetBoard(self, grids):
          self.fillTheFeel(grids)
    

    def ColorSolver(self, grids):
         grid=self.solver.solveSudoku(grids)
         self.solve(grid)
         self.fillTheFeel(grid)
    


    
    def fillUnit(self,  btn):
        btn.setText(self.clicked_button)

 
 
    

    def changeClickedButton(self, number):
        self.clicked_button=number

    def fillTheGrid(self):
          for i in range(9):
                for j in range(9):
                        self.grids[i][j]=int(self.listok[i][j].text())
                        


    def fillTheFeel(self,grids):
          for i in range(9):
                for j in range(9):
                        self.listok[i][j].setText(str(grids[i][j]))


    

    def fillingFieldEvery(self):
          while self.thr1.is_alive():
                print("yeah")
                for i in range(9):
                         for j in range(9):
                                self.listok[i][j].setText(str(self.grids[i][j]))

    



    def can_place(self,grid, row, col, num):
    # Check if num can be placed in (row, col) of grid
        for i in range(9):
                if grid[row][i] == num or grid[i][col] == num:
                        return False
        box_row = (row // 3) * 3
        box_col = (col // 3) * 3
        for i in range(3):
                for j in range(3):
                        if grid[box_row + i][box_col + j] == num:
                                return False
        return True

    def find_empty(self,grid):
        # Find an empty cell in grid
        for i in range(9):
                for j in range(9):
                        if grid[i][j] == 0:
                                return (i, j)
        return None




    def solve(self,grid):
         # Recursive function to solve Sudoku grid
        
        empty_cell = self.find_empty(grid)
        if not empty_cell:
                return True
        row, col = empty_cell
        for num in range(1, 10):
                if self.can_place(grid, row, col, num):
                        grid[row][col] = num
                        # self.listok[row][col].setText(str(self.grids[row][col]))
                        if self.solve(grid):
                                return True
                grid[row][col] = 0
        return False
    

          
    def run(self):
          self.fillTheGrid()

          grid=copy.deepcopy(self.grids)

          self.solve(grid)
          
          self.fillTheFeel(grid)







if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    ui.fillTheFeel(Ui_Form.grids)
  
    
    sys.exit(app.exec_())



